---
import { clerkClient } from '@clerk/astro/server';
const { getToken } = Astro.locals.auth()
const token = await getToken();
const backendUrl = process.env.PUBLIC_BACKEND_URL
const response = await fetch(`${backendUrl}/api/tokens`, {
    headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
    }
});

if (!response.ok) {
    const errorText = await response.text();
    console.error('‚ùå API Error:', response.status, errorText);
    throw new Error(`Failed to fetch API tokens: ${response.status}`);
}
const data = await response.json();
const tokens = data.data?.tokens || [];
const tokenCards = tokens.map(token => {
                const isExpired = token.expiresAt && new Date(token.expiresAt) < new Date();
                const isActive = token.isActive && !isExpired;
                
                return `
                <div class="bg-white border ${isActive ? 'border-gray-200' : 'border-red-200'} rounded-lg p-6 hover:shadow-lg transition-all">
                    <div class="flex items-start justify-between mb-4">
                        <div class="flex-1">
                            <div class="flex items-center space-x-2 mb-2">
                                <h4 class="text-lg font-semibold text-gray-900">${token.name}</h4>
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                    isActive 
                                        ? 'bg-green-100 text-green-800' 
                                        : 'bg-red-100 text-red-800'
                                }">
                                    ${isActive ? 'üü¢ Active' : isExpired ? 'üî¥ Expired' : '‚è∏Ô∏è Inactive'}
                                </span>
                            </div>
                            <div class="space-y-1 text-sm text-gray-600">
                                <div><span class="font-medium">Prefix:</span> <code class="bg-gray-100 px-1 rounded">${token.prefix}***</code></div>
                                <div><span class="font-medium">Created:</span> ${new Date(token.createdAt).toLocaleDateString()}</div>
                                ${token.lastUsedAt ? `<div><span class="font-medium">Last used:</span> ${new Date(token.lastUsedAt).toLocaleDateString()}</div>` : '<div><span class="font-medium">Last used:</span> Never</div>'}
                                ${token.expiresAt ? `<div><span class="font-medium">Expires:</span> ${new Date(token.expiresAt).toLocaleDateString()}</div>` : '<div><span class="font-medium">Expires:</span> Never</div>'}
                            </div>
                        </div>
                    </div>
                    
                    <div class="flex items-center justify-end space-x-2 pt-4 border-t border-gray-100">
                        <button 
                            class="toggle-token-btn text-sm px-3 py-1 rounded-md transition-colors ${
                                token.isActive 
                                    ? 'text-orange-600 hover:text-orange-800 border border-orange-300 hover:bg-orange-50' 
                                    : 'text-green-600 hover:text-green-800 border border-green-300 hover:bg-green-50'
                            }"
                            data-token-id="${token.id}"
                            data-current-status="${token.isActive}"
                        >
                            ${token.isActive ? '‚è∏Ô∏è Deactivate' : '‚ñ∂Ô∏è Activate'}
                        </button>
                        <button 
                            class="delete-token-btn text-white bg-red-600 hover:bg-red-700 font-medium text-sm px-3 py-1 rounded-md transition-colors border border-red-600"
                            data-token-id="${token.id}"
                            data-token-name="${token.name}"
                        >
                            üóëÔ∏è Delete
                        </button>
                    </div>
                </div>`;
            });


---

                    <div class="lg:col-span-2">
                        <div class="bg-white shadow-sm rounded-lg p-4 border border-gray-100 mb-6">
                            <h3 class="text-xl font-semibold text-gray-900 flex items-center">
                                <svg width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="w-6 h-6 text-green-600 mr-2">
                                    <path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M16.555 3.843l3.602 3.602a2.877 2.877 0 0 1 0 4.069l-2.643 2.643a2.877 2.877 0 0 1 -4.069 0l-.301 -.301l-6.558 6.558a2 2 0 0 1 -1.239 .578l-.175 .008h-1.172a1 1 0 0 1 -.993 -.883l-.007 -.117v-1.172a2 2 0 0 1 .467 -1.284l.119 -.13l.414 -.414h2v-2h2v-2l2.144 -2.144l-.301 -.301a2.877 2.877 0 0 1 0 -4.069l2.643 -2.643a2.877 2.877 0 0 1 4.069 0z" /><path d="M15 9h.01" /></svg>

                                Your API Tokens
                            </h3>
                        </div>
                        
                        <div id="tokens-container" class="space-y-4">
                            {tokenCards.map(tokenHtml => (
                                <div set:html={tokenHtml} />
                            ))}

                        <!-- Empty State -->
                        <div id="tokens-empty" class="text-center py-16 hidden">
                            <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-3a1 1 0 011-1h2.586l6.414-6.414a6 6 0 017.743-5.743L15 7z"></path>
                            </svg>
                            <h3 class="text-xl font-medium text-gray-900 mb-2">No API tokens yet</h3>
                            <p class="text-gray-600 mb-6">Create your first API token to start accessing the API programmatically</p>
                        </div>
                    </div>