---
// CompartmentManager.astro - Component for managing compartments
---

<div class="bg-white shadow-sm rounded-lg p-6 border border-gray-100">
    <div class="flex items-center justify-between mb-6">
        <h3 class="text-xl font-semibold text-gray-900 flex items-center">
            <svg class="w-5 h-5 text-green-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.196-2.121M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.196-2.121M7 20v-2c0-.656.126-1.283.356-1.857M7 20a3 3 0 013-3h4a3 3 0 013 3z"></path>
            </svg>
            My Compartments
        </h3>
        <button id="create-compartment-btn" class="bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded-lg transition-colors">
            <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            New Compartment
        </button>
    </div>

    <!-- Compartments List -->
    <div id="compartments-container" class="space-y-3">
        <!-- Compartments will be loaded here -->
    </div>

    <!-- Empty State -->
    <div id="compartments-empty" class="text-center py-8 hidden">
        <svg class="w-12 h-12 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.196-2.121M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.196-2.121M7 20v-2c0-.656.126-1.283.356-1.857M7 20a3 3 0 013-3h4a3 3 0 013 3z"></path>
        </svg>
        <h4 class="text-lg font-medium text-gray-900 mb-2">No compartments yet</h4>
        <p class="text-gray-600 mb-4">Create your first compartment to collaborate with others</p>
        <button class="bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded-lg transition-colors" onclick="document.getElementById('create-compartment-btn').click()">
            Create Compartment
        </button>
    </div>
</div>

<!-- Create Compartment Modal -->
<div id="create-compartment-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold text-gray-900">Create New Compartment</h3>
                <button id="close-create-compartment-modal" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            
            <form id="create-compartment-form">
                <div class="mb-4">
                    <label for="compartment-name" class="block text-sm font-medium text-gray-700 mb-2">
                        Name <span class="text-red-500">*</span>
                    </label>
                    <input
                        type="text"
                        id="compartment-name"
                        name="name"
                        required
                        maxlength="100"
                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500"
                        placeholder="e.g., Moving 2025, Office Inventory"
                    />
                </div>
                
                <div class="mb-6">
                    <label for="compartment-description" class="block text-sm font-medium text-gray-700 mb-2">
                        Description (optional)
                    </label>
                    <textarea
                        id="compartment-description"
                        name="description"
                        rows="3"
                        maxlength="500"
                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500"
                        placeholder="Brief description of this compartment..."
                    ></textarea>
                </div>
                
                <div class="flex justify-end space-x-3">
                    <button
                        type="button"
                        id="cancel-create-compartment"
                        class="px-4 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
                    >
                        Cancel
                    </button>
                    <button
                        type="submit"
                        id="submit-create-compartment"
                        class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors"
                    >
                        Create Compartment
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Compartment Details Modal -->
<div id="compartment-details-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full p-6 max-h-[90vh] overflow-y-auto">
            <div class="flex justify-between items-center mb-6">
                <h3 id="compartment-details-title" class="text-lg font-semibold text-gray-900">Compartment Details</h3>
                <button id="close-compartment-details-modal" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            
            <div id="compartment-details-content">
                <!-- Details will be loaded here -->
            </div>
        </div>
    </div>
</div>

<!-- Invite Member Modal -->
<div id="invite-member-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold text-gray-900">Invite Member</h3>
                <button id="close-invite-member-modal" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            
            <form id="invite-member-form" class="space-y-4">
                <div>
                    <label for="member-user-id" class="block text-sm font-medium text-gray-700 mb-1">
                        User ID/Email
                    </label>
                    <input
                        type="text"
                        id="member-user-id"
                        name="userId"
                        required
                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500"
                        placeholder="Enter user ID or email to invite"
                    />
                </div>
                
                <div>
                    <label for="member-role" class="block text-sm font-medium text-gray-700 mb-1">
                        Role
                    </label>
                    <select
                        id="member-role"
                        name="role"
                        required
                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500"
                    >
                        <option value="member">Member</option>
                        <option value="admin">Admin</option>
                    </select>
                </div>
                
                <div class="flex justify-end space-x-3">
                    <button
                        type="button"
                        id="cancel-invite-member"
                        class="px-4 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
                    >
                        Cancel
                    </button>
                    <button
                        type="submit"
                        id="submit-invite-member"
                        class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors"
                    >
                        Send Invitation
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
class CompartmentManager {
    constructor() {
        this.apiUrl = import.meta.env.PUBLIC_BACKEND_URL || 'http://localhost:8080';
        this.currentCompartmentId = null;
        this.init();
    }

    async init() {
        try {
            // Wait for Clerk to be available
            await this.waitForClerk();
            this.bindEvents();
            await this.loadCompartments();
        } catch (error) {
            console.error('CompartmentManager: Initialization error:', error);
        }
    }

    async waitForClerk() {
        return new Promise((resolve) => {
            const checkClerk = () => {
                if (window.Clerk && window.Clerk.session) {
                    resolve();
                } else {
                    setTimeout(checkClerk, 100);
                }
            };
            checkClerk();
        });
    }

    async getToken() {
        try {
            if (window.Clerk && window.Clerk.session) {
                return await window.Clerk.session.getToken();
            }
            return null;
        } catch (error) {
            console.error('Error getting token:', error);
            return null;
        }
    }

    bindEvents() {
        // Create compartment modal
        document.getElementById('create-compartment-btn')?.addEventListener('click', () => {
            this.showCreateCompartmentModal();
        });

        document.getElementById('close-create-compartment-modal')?.addEventListener('click', () => {
            this.hideCreateCompartmentModal();
        });

        document.getElementById('cancel-create-compartment')?.addEventListener('click', () => {
            this.hideCreateCompartmentModal();
        });

        document.getElementById('create-compartment-form')?.addEventListener('submit', (e) => {
            e.preventDefault();
            this.createCompartment();
        });

        // Compartment details modal
        document.getElementById('close-compartment-details-modal')?.addEventListener('click', () => {
            this.hideCompartmentDetailsModal();
        });

        // Invite member modal
        document.getElementById('close-invite-member-modal')?.addEventListener('click', () => {
            this.hideInviteMemberModal();
        });

        document.getElementById('cancel-invite-member')?.addEventListener('click', () => {
            this.hideInviteMemberModal();
        });

        document.getElementById('invite-member-form')?.addEventListener('submit', (e) => {
            e.preventDefault();
            this.inviteMember();
        });

        // Close modals on outside click
        document.getElementById('create-compartment-modal')?.addEventListener('click', (e) => {
            if (e.target.id === 'create-compartment-modal') {
                this.hideCreateCompartmentModal();
            }
        });

        document.getElementById('compartment-details-modal')?.addEventListener('click', (e) => {
            if (e.target.id === 'compartment-details-modal') {
                this.hideCompartmentDetailsModal();
            }
        });

        document.getElementById('invite-member-modal')?.addEventListener('click', (e) => {
            if (e.target.id === 'invite-member-modal') {
                this.hideInviteMemberModal();
            }
        });
    }

    async loadCompartments() {
        try {
            // Check if elements exist
            const container = document.getElementById('compartments-container');
            const emptyState = document.getElementById('compartments-empty');
            
            if (!container || !emptyState) {
                console.error('CompartmentManager: Required DOM elements not found');
                return;
            }

            const token = await this.getToken();
            if (!token) {
                console.error('No authentication token available');
                return;
            }

            const response = await fetch(`${this.apiUrl}/api/compartments/list`, {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error('Failed to fetch compartments');
            }

            const data = await response.json();
            
            // Extract compartments from the nested response structure
            const compartments = data.data?.compartments || data.compartments || [];
            
            this.renderCompartments(compartments);
        } catch (error) {
            console.error('Error loading compartments:', error);
            this.showError('Failed to load compartments');
        }
    }

    renderCompartments(compartments) {
        const container = document.getElementById('compartments-container');
        const emptyState = document.getElementById('compartments-empty');

        if (!compartments || compartments.length === 0) {
            container.innerHTML = '';
            emptyState.classList.remove('hidden');
            return;
        }

        emptyState.classList.add('hidden');
        container.innerHTML = compartments.map(compartment => `
            <div class="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
                <div class="flex items-center justify-between">
                    <div class="flex-1">
                        <h4 class="font-medium text-gray-900">${this.escapeHtml(compartment.name)}</h4>
                        ${compartment.description ? `<p class="text-sm text-gray-600 mt-1">${this.escapeHtml(compartment.description)}</p>` : ''}
                        <div class="flex items-center mt-2 text-xs text-gray-500">
                            <span>Created ${new Date(compartment.createdAt).toLocaleDateString()}</span>
                        </div>
                    </div>
                    <div class="flex items-center space-x-2">
                        <button 
                            class="view-compartment-btn text-blue-600 hover:text-blue-800 font-medium text-sm"
                            data-compartment-id="${compartment.id}"
                        >
                            View Details
                        </button>
                    </div>
                </div>
            </div>
        `).join('');

        // Bind view details buttons
        container.querySelectorAll('.view-compartment-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const compartmentId = e.target.getAttribute('data-compartment-id');
                this.showCompartmentDetails(compartmentId);
            });
        });
    }

    showCreateCompartmentModal() {
        document.getElementById('create-compartment-modal').classList.remove('hidden');
        document.getElementById('compartment-name').focus();
    }

    hideCreateCompartmentModal() {
        document.getElementById('create-compartment-modal').classList.add('hidden');
        document.getElementById('create-compartment-form').reset();
    }

    async createCompartment() {
        const form = document.getElementById('create-compartment-form');
        const formData = new FormData(form);
        const submitBtn = document.getElementById('submit-create-compartment');

        try {
            submitBtn.disabled = true;
            submitBtn.textContent = 'Creating...';

            const token = await this.getToken();
            if (!token) {
                throw new Error('No authentication token available');
            }

            const compartmentData = {
                name: formData.get('name').trim(),
                description: formData.get('description').trim()
            };

            const response = await fetch(`${this.apiUrl}/api/compartments`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(compartmentData)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Failed to create compartment');
            }

            const data = await response.json();
            this.showSuccess(data.message || 'Compartment created successfully!');
            this.hideCreateCompartmentModal();
            this.loadCompartments();

        } catch (error) {
            console.error('Error creating compartment:', error);
            this.showError(error.message || 'Failed to create compartment');
        } finally {
            submitBtn.disabled = false;
            submitBtn.textContent = 'Create Compartment';
        }
    }

    async showCompartmentDetails(compartmentId) {
        try {
            const token = await this.getToken();
            if (!token) {
                throw new Error('No authentication token available');
            }

            // Show modal first
            document.getElementById('compartment-details-modal').classList.remove('hidden');
            document.getElementById('compartment-details-content').innerHTML = '<div class="flex justify-center py-8"><div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div></div>';

            // Fetch compartment details and members
            const [detailsResponse, membersResponse] = await Promise.all([
                fetch(`${this.apiUrl}/api/compartments/details?compartmentId=${compartmentId}`, {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                }),
                fetch(`${this.apiUrl}/api/compartments/members?compartmentId=${compartmentId}`, {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                })
            ]);

            if (!detailsResponse.ok || !membersResponse.ok) {
                throw new Error('Failed to fetch compartment details');
            }

            const detailsData = await detailsResponse.json();
            const membersData = await membersResponse.json();

            this.renderCompartmentDetails(detailsData.compartment, membersData.members);

        } catch (error) {
            console.error('Error fetching compartment details:', error);
            document.getElementById('compartment-details-content').innerHTML = `
                <div class="text-center py-8">
                    <p class="text-red-600">Failed to load compartment details</p>
                </div>
            `;
        }
    }

    renderCompartmentDetails(compartment, members) {
        document.getElementById('compartment-details-title').textContent = compartment.name;
        
        const content = document.getElementById('compartment-details-content');
        content.innerHTML = `
            <div class="space-y-6">
                <!-- Compartment Info -->
                <div>
                    <h4 class="font-medium text-gray-900 mb-2">Information</h4>
                    <div class="bg-gray-50 rounded-lg p-4">
                        <p><span class="font-medium">Name:</span> ${this.escapeHtml(compartment.name)}</p>
                        ${compartment.description ? `<p class="mt-2"><span class="font-medium">Description:</span> ${this.escapeHtml(compartment.description)}</p>` : ''}
                        <p class="mt-2"><span class="font-medium">Created:</span> ${new Date(compartment.createdAt).toLocaleDateString()}</p>
                    </div>
                </div>

                <!-- Members -->
                <div>
                    <div class="flex items-center justify-between mb-4">
                        <h4 class="font-medium text-gray-900">Members (${members.length})</h4>
                        <button 
                            class="bg-green-600 hover:bg-green-700 text-white text-sm font-medium px-3 py-1.5 rounded-lg transition-colors flex items-center"
                            onclick="compartmentManager.showInviteMemberModal('${compartment.id}')"
                        >
                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                            </svg>
                            Invite Member
                        </button>
                    </div>
                    <div class="space-y-2">
                        ${members.map(member => `
                            <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg border">
                                <div class="flex items-center space-x-3">
                                    <div class="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                                        <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                        </svg>
                                    </div>
                                    <div>
                                        <p class="font-medium text-gray-900">${this.escapeHtml(member.userId)}</p>
                                        <div class="flex items-center space-x-2">
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${member.role === 'owner' ? 'bg-purple-100 text-purple-800' : member.role === 'admin' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'}">
                                                ${member.role}
                                            </span>
                                            <span class="text-xs text-gray-500">
                                                Joined ${new Date(member.joinedAt).toLocaleDateString()}
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                ${member.role !== 'owner' ? `
                                    <button class="text-red-600 hover:text-red-800 text-sm" title="Remove member">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                        </svg>
                                    </button>
                                ` : ''}
                            </div>
                        `).join('')}
                    </div>
                </div>

                <!-- Actions -->
                <div class="border-t pt-4">
                    <div class="flex justify-end space-x-3">
                        <button class="px-4 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors">
                            Edit Compartment
                        </button>
                        <button class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                            View Boxes
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    showInviteMemberModal(compartmentId) {
        this.currentCompartmentId = compartmentmentId;
        document.getElementById('invite-member-modal').classList.remove('hidden');
        // Clear form
        document.getElementById('invite-member-form').reset();
    }

    hideInviteMemberModal() {
        document.getElementById('invite-member-modal').classList.add('hidden');
        this.currentCompartmentId = null;
    }

    async inviteMember() {
        const form = document.getElementById('invite-member-form');
        const submitBtn = document.getElementById('submit-invite-member');
        
        try {
            submitBtn.disabled = true;
            submitBtn.textContent = 'Sending...';

            const formData = new FormData(form);
            const inviteData = {
                userId: formData.get('userId').toString().trim(),
                role: formData.get('role').toString()
            };

            if (!inviteData.userId) {
                this.showError('User ID is required');
                return;
            }

            const token = await this.getToken();
            if (!token) {
                this.showError('Authentication required');
                return;
            }

            const response = await fetch(`${this.apiUrl}/api/compartments/invite?compartmentId=${this.currentCompartmentId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(inviteData)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Failed to send invitation');
            }

            this.hideInviteMemberModal();
            this.showSuccess('Invitation sent successfully!');
            
            // Refresh compartment details if modal is open
            if (!document.getElementById('compartment-details-modal').classList.contains('hidden')) {
                await this.showCompartmentDetails(this.currentCompartmentId);
            }
            
        } catch (error) {
            console.error('Error sending invitation:', error);
            this.showError(error.message || 'Failed to send invitation');
        } finally {
            submitBtn.disabled = false;
            submitBtn.textContent = 'Send Invitation';
        }
    }

    hideCompartmentDetailsModal() {
        document.getElementById('compartment-details-modal').classList.add('hidden');
    }

    escapeHtml(text) {
        const map = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#039;'
        };
        return text.replace(/[&<>"']/g, m => map[m]);
    }

    showSuccess(message) {
        // Use existing notification system if available
        if (window.showNotification) {
            window.showNotification(message, 'success');
        } else {
            alert(message);
        }
    }

    showError(message) {
        // Use existing notification system if available
        if (window.showNotification) {
            window.showNotification(message, 'error');
        } else {
            alert(message);
        }
    }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    // Wait a bit more for everything to be ready
    setTimeout(() => {
        window.compartmentManager = new CompartmentManager();
    }, 1000);
});
</script>
