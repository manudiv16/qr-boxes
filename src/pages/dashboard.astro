---
import Layout from "../layouts/Layout.astro";
import { SignedIn, SignedOut } from "@clerk/astro/components";
import CreateBoxForm from "../components/CreateBoxForm.astro";
import "../styles/global.css";
---

<Layout title="Dashboard" currentPage="dashboard">
    <SignedOut>
        <div class="min-h-screen bg-gray-50 flex items-center justify-center">
            <div class="text-center">
                <h1 class="text-2xl font-bold text-gray-900 mb-4">
                    Access Denied
                </h1>
                <p class="text-gray-600 mb-4">
                    You need to be signed in to access this page.
                </p>
                <a
                    href="/"
                    class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
                >
                    Go to Home
                </a>
            </div>
        </div>
    </SignedOut>

    <SignedIn>
        <main
            class="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50 pb-12"
        >
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
                <!-- Status Message -->
                <div
                    id="status"
                    class="mb-6 p-4 rounded-lg bg-blue-50 border border-blue-200 shadow-sm"
                >
                    <div class="flex items-center">
                        <svg
                            class="w-5 h-5 mr-2 text-blue-500"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                            ></path>
                        </svg>
                        <div class="text-blue-800 font-medium">
                            Loading your boxes...
                        </div>
                    </div>
                </div>

                <!-- Loading Spinner -->
                <div id="loading" class="flex justify-center items-center py-20">
                    <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
                </div>

                <!-- Main Content -->
                <div class="grid grid-cols-1 gap-8 mt-8">
                    <!-- Boxes Container -->
                    <div class="lg:col-span-1">
                        <div class="bg-white shadow-sm rounded-lg p-4 border border-gray-100 mb-4">
                            <div class="flex items-center justify-between">
                                <h3 class="text-xl font-semibold text-gray-900 flex items-center">
                                    <svg class="w-5 h-5 text-blue-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
                                    </svg>
                                    My Boxes
                                </h3>
                                
                                <!-- Filter Controls -->
                                <div class="flex items-center gap-3">
                                    <div class="flex items-center">
                                        <label for="room-filter" class="text-sm font-medium text-gray-700 mr-2">Filter by room:</label>
                                        <select id="room-filter" class="text-sm border border-gray-300 rounded-lg px-3 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                            <option value="">All rooms</option>
                                        </select>
                                    </div>
                                    <button id="clear-filter" class="text-sm text-gray-500 hover:text-gray-700 underline hidden">
                                        Clear filter
                                    </button>
                                    <button 
                                        id="open-create-box-modal" 
                                        class="bg-blue-600 hover:bg-blue-700 text-white font-medium px-4 py-2 rounded-lg transition-colors duration-200 flex items-center gap-2 shadow-sm"
                                    >
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                        </svg>
                                        New Box
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div id="boxes-container" class="grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3"></div>
                    </div>
                </div>

                <!-- QR Modal -->
                <div
                    id="qr-modal"
                    class="fixed inset-0 items-center justify-center z-50 hidden transition-all duration-300 ease-out"
                    style="background-color: rgba(0, 0, 0, 0.5);"
                >
                    <div class="bg-white rounded-xl shadow-xl max-w-md w-full p-6 transform transition-all duration-300 ease-out scale-95 opacity-0" id="qr-modal-inner">
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="text-xl font-bold">QR Code</h3>
                            <button
                                class="close-qr-modal text-gray-500 hover:text-gray-700"
                            >
                                <svg
                                    class="w-6 h-6"
                                    fill="none"
                                    stroke="currentColor"
                                    viewBox="0 0 24 24"
                                >
                                    <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        stroke-width="2"
                                        d="M6 18L18 6M6 6l12 12"></path>
                                </svg>
                            </button>
                        </div>
                        <div id="qr-content" class="text-center"></div>
                        <div class="flex justify-end mt-6 gap-2">
                            <button
                                id="download-qr-btn"
                                class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg"
                            >
                                Download QR
                            </button>
                            <button
                                class="close-qr-modal bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded-lg"
                            >
                                Close
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Create Box Modal -->
                <div
                    id="create-box-modal"
                    class="fixed inset-0 items-center justify-center z-50 hidden transition-all duration-300 ease-out"
                    style="background-color: rgba(0, 0, 0, 0.3);"
                >
                    <div class="bg-white rounded-xl shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto transform transition-all duration-300 ease-out scale-95 opacity-0" id="create-box-modal-inner">
                        <div class="sticky top-0 bg-white p-6 border-b border-gray-100 rounded-t-xl">
                            <div class="flex justify-between items-center">
                                <h3 class="text-xl font-semibold text-gray-900 flex items-center">
                                    <svg
                                        class="w-6 h-6 text-green-600 mr-2"
                                        fill="none"
                                        stroke="currentColor"
                                        viewBox="0 0 24 24"
                                    >
                                        <path
                                            stroke-linecap="round"
                                            stroke-linejoin="round"
                                            stroke-width="2"
                                            d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                    </svg>
                                    Create New Box
                                </h3>
                                <button
                                    id="close-create-box-modal"
                                    class="text-gray-500 hover:text-gray-700 transition-colors"
                                >
                                    <svg
                                        class="w-6 h-6"
                                        fill="none"
                                        stroke="currentColor"
                                        viewBox="0 0 24 24"
                                    >
                                        <path
                                            stroke-linecap="round"
                                            stroke-linejoin="round"
                                            stroke-width="2"
                                            d="M6 18L18 6M6 6l12 12"></path>
                                    </svg>
                                </button>
                            </div>
                        </div>
                        <div class="p-6">
                            <CreateBoxForm />
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </SignedIn>
</Layout>

<script>
    // DOM elements
    const statusEl = document.getElementById("status");
    const loadingEl = document.getElementById("loading");
    const boxesContainerEl = document.getElementById("boxes-container");
    const qrModal = document.getElementById("qr-modal");
    const qrContent = document.getElementById("qr-content");
    const downloadQrBtn = document.getElementById("download-qr-btn");
    const refreshBtn = document.getElementById("refresh-btn");
    const roomFilterEl = document.getElementById("room-filter");
    const clearFilterBtn = document.getElementById("clear-filter");
    const createBoxModal = document.getElementById("create-box-modal");
    const openCreateBoxModalBtn = document.getElementById("open-create-box-modal");
    const closeCreateBoxModalBtn = document.getElementById("close-create-box-modal");

    // State
    let allBoxes: any[] = []; // Store all boxes for filtering
    let availableRooms = new Set<string>(); // Track unique rooms

    // Close modal buttons
    document.querySelectorAll(".close-qr-modal").forEach((btn) => {
        btn.addEventListener("click", () => closeQRModal());
    });

    // Create Box Modal event listeners
    openCreateBoxModalBtn?.addEventListener("click", () => openCreateBoxModal());
    closeCreateBoxModalBtn?.addEventListener("click", () => closeCreateBoxModal());
    
    // Close modal when clicking on backdrop
    createBoxModal?.addEventListener("click", (e) => {
        if (e.target === createBoxModal) {
            closeCreateBoxModal();
        }
    });

    // Close modal with Escape key
    document.addEventListener("keydown", (e) => {
        if (e.key === "Escape") {
            if (createBoxModal && !createBoxModal.classList.contains("hidden")) {
                closeCreateBoxModal();
            }
            if (qrModal && !qrModal.classList.contains("hidden")) {
                closeQRModal();
            }
        }
    });

    // Event Listeners

    refreshBtn?.addEventListener('click', () => {
        loadBoxes();
    });

    // Room filter event listeners
    roomFilterEl?.addEventListener('change', (e) => {
        const selectedRoom = (e.target as HTMLSelectElement).value;
        filterBoxesByRoom(selectedRoom);
        
        // Show/hide clear filter button
        if (clearFilterBtn) {
            if (selectedRoom) {
                clearFilterBtn.classList.remove('hidden');
            } else {
                clearFilterBtn.classList.add('hidden');
            }
        }
    });

    clearFilterBtn?.addEventListener('click', () => {
        if (roomFilterEl) {
            (roomFilterEl as HTMLSelectElement).value = '';
        }
        clearFilterBtn.classList.add('hidden');
        renderBoxes(allBoxes);
        updateStatusForBoxes(allBoxes);
    });

    // Create box event
    document.addEventListener("create-box", async (e) => {
        try {
            const { name, room, description, items, compartmentId } = (e as CustomEvent).detail;
            showLoading(true);
            updateStatus("Creating QR box...");

            const token = await getAuthToken();
            const requestBody: any = {
                name: name,
                room: room || "",
                description: description || "",
                items: items.join("\n"),
            };

            // Only include compartmentId if it's not empty
            if (compartmentId) {
                requestBody.compartmentId = compartmentId;
            }

            const response = await fetch(`${process.env.PUBLIC_BACKEND_URL}/api/boxes`, {
                method: "POST",
                headers: {
                    Authorization: `Bearer ${token}`,
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(requestBody),
            });

            if (!response.ok) {
                throw new Error(`Backend error: ${response.status} ${response.statusText}`);
            }

            const data = await response.json();

            // Show success and reload boxes
            updateStatus("Box created successfully!", "success");
            loadBoxes();
            
            // Close the create box modal
            closeCreateBoxModal();
        } catch (error) {
            console.error("Error creating QR box:", error);
            updateStatus(error instanceof Error ? error.message : "An unknown error occurred", "error");
        } finally {
            showLoading(false);
        }
    });

    // Listen for status update events from components
    document.addEventListener("update-status", (e) => {
        const { message, type } = (e as CustomEvent).detail;
        updateStatus(message, type);
    });

    downloadQrBtn?.addEventListener('click', () => {
        const img = qrContent?.querySelector("img");
        if (img) {
            const link = document.createElement("a");
            link.href = img.src;
            link.download = `qr-code-${new Date().getTime()}.png`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    });

    // Get auth token from Clerk
    async function getAuthToken() {
        // Wait for Clerk to be available and loaded
        await waitForClerk();
        
        if (typeof window !== 'undefined' && window.Clerk) {
            const session = window.Clerk.session;
            if (session) {
                return await session.getToken();
            }
        }
        throw new Error("User not authenticated or no active session");
    }

    // Wait for Clerk to be properly loaded
    async function waitForClerk() {
        return new Promise((resolve) => {
            const checkClerk = () => {
                if (typeof window !== 'undefined' && window.Clerk && window.Clerk.loaded) {
                    resolve(true);
                } else {
                    setTimeout(checkClerk, 100);
                }
            };
            checkClerk();
        });
    }


    // Load boxes from backend
    async function loadBoxes() {
        try {
            showLoading(true);
            updateStatus("Loading your boxes...");

            const token = await getAuthToken();
            const response = await fetch(
                `${process.env.PUBLIC_BACKEND_URL}/api/boxes/list`,
                {
                    headers: {
                        Authorization: `Bearer ${token}`,
                        "Content-Type": "application/json",
                    },
                },
            );

            if (!response.ok) {
                throw new Error(`Failed to load boxes: ${response.status}`);
            }

            const data = await response.json();
            const boxes = data.data.boxes || [];

            // Store all boxes for filtering
            allBoxes = boxes;
            
            // Update available rooms and room filter dropdown
            updateRoomFilter(boxes);
            
            renderBoxes(boxes);
            updateStatusForBoxes(boxes);
        } catch (error) {
            console.error("Error loading boxes:", error);
            updateStatus(`Error: ${error instanceof Error ? error.message : 'Unknown error occurred'}`, "error");
        } finally {
            showLoading(false);
        }
    }

    // Render boxes in the container
    function renderBoxes(boxes: any[]) {
        if (!boxesContainerEl) return;

        if (boxes.length === 0) {
            boxesContainerEl.innerHTML = `
            <div class="col-span-full text-center p-8 bg-white border border-gray-100 rounded-lg shadow-sm">
                <svg class="w-12 h-12 text-gray-300 mx-auto mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
                </svg>
                <h3 class="text-lg font-medium text-gray-700 mb-1">No boxes yet</h3>
                <p class="text-gray-500 text-sm">Create a box using the form on the left</p>
            </div>
        `;
        } else {
            boxesContainerEl.innerHTML = boxes
                .map(
                    (box) => `
                <div class="bg-white border border-gray-100 rounded-xl shadow-sm hover:shadow-md transition-all">
                    <div class="p-5">
                        <div class="flex items-start justify-between mb-2">
                            <div class="flex-1">
                                <h4 class="text-lg font-bold text-gray-900">${box.name}</h4>
                            </div>
                            ${
                                box.room 
                                    ? `<span class="inline-flex items-center bg-blue-100 text-blue-800 text-xs font-medium px-2 py-1 rounded-full">
                                        <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                                        </svg>
                                        ${box.room}
                                    </span>`
                                    : ''
                            }
                        </div>
                        ${
                            box.description 
                                ? `<p class="text-sm text-gray-600 mb-3 line-clamp-2">${box.description}</p>`
                                : ''
                        }
                        <div class="flex items-center text-sm text-gray-500 mb-3">
                            <span class="font-medium">${box.items?.length || 0} items</span>
                            <span class="mx-2">•</span>
                            <span class="text-xs">${new Date(box.createdAt).toLocaleDateString()}</span>
                        </div>

                        <div class="flex flex-wrap gap-1 mb-3">
                            ${
                                box.items && box.items.length > 0
                                    ? box.items
                                          .slice(0, 3)
                                          .map(
                                              (item: string, i: number) => `
                                    <span class="inline-flex items-center bg-gray-100 text-gray-800 text-xs px-2 py-1 rounded-full">
                                        ${item}
                                    </span>
                                `,
                                          )
                                          .join("") +
                                      (box.items.length > 3
                                          ? `<span class="text-gray-400 text-xs">+${box.items.length - 3} more</span>`
                                          : "")
                                    : '<span class="text-gray-400 text-xs">No items</span>'
                            }
                        </div>
                    </div>
                    <div class="border-t border-gray-100 bg-gray-50 p-3 rounded-b-xl flex justify-between items-center">
                        <button data-id="${box.id}" data-action="view" class="text-sm text-blue-600 hover:text-blue-800 font-medium">
                            View details
                        </button>
                        <div class="flex gap-2">
                            <button data-id="${box.id}" data-action="qr" class="text-sm bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded-md">
                                Show QR
                            </button>
                            <button data-id="${box.id}" data-name="${box.name}" data-action="delete" class="text-sm bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded-md">
                                Delete
                            </button>
                        </div>
                    </div>
                </div>
            `,
                )
                .join("");

            // Add event listeners to box buttons
            boxesContainerEl.querySelectorAll('[data-action]').forEach(button => {
                button.addEventListener('click', () => {
                    const boxId = button.getAttribute('data-id');
                    const action = button.getAttribute('data-action');
                    
                    if (action === 'view' && boxId) {
                        // Navigate to the box details page
                        window.location.href = `/box/${boxId}`;
                    } else if (action === 'qr' && boxId) {
                        showBoxQR(boxId);
                    } else if (action === 'delete') {
                        const boxName = button.getAttribute('data-name');
                        if (boxId && boxName) {
                            deleteBox(boxId, boxName);
                        }
                    }
                });
            });
        }
    }

    // Update room filter dropdown with available rooms
    function updateRoomFilter(boxes: any[]) {
        if (!roomFilterEl) return;
        
        // Clear existing rooms
        availableRooms.clear();
        
        // Extract unique rooms from boxes
        boxes.forEach(box => {
            if (box.room && box.room.trim()) {
                availableRooms.add(box.room.trim());
            }
        });
        
        // Get current selection
        const currentValue = (roomFilterEl as HTMLSelectElement).value;
        
        // Update dropdown options
        const sortedRooms = Array.from(availableRooms).sort();
        roomFilterEl.innerHTML = '<option value="">All rooms</option>' + 
            sortedRooms.map(room => 
                `<option value="${room}" ${room === currentValue ? 'selected' : ''}>${room}</option>`
            ).join('');
    }

    // Filter boxes by selected room
    function filterBoxesByRoom(selectedRoom: string) {
        let filteredBoxes;
        
        if (!selectedRoom) {
            filteredBoxes = allBoxes;
        } else {
            filteredBoxes = allBoxes.filter(box => 
                box.room && box.room.trim() === selectedRoom
            );
        }
        
        renderBoxes(filteredBoxes);
        updateStatusForBoxes(filteredBoxes, selectedRoom);
    }

    // Update status message for filtered boxes
    function updateStatusForBoxes(boxes: any[], filterRoom?: string) {
        let message;
        
        if (boxes.length === 0) {
            if (filterRoom) {
                message = `No boxes found in "${filterRoom}". Try a different room or create a new box.`;
            } else {
                message = "No boxes found. Create a box to get started.";
            }
        } else {
            const boxText = boxes.length !== 1 ? "boxes" : "box";
            if (filterRoom) {
                message = `Showing ${boxes.length} ${boxText} in "${filterRoom}"`;
            } else {
                message = `Showing ${boxes.length} ${boxText}`;
            }
        }
        
        updateStatus(message);
    }

    // Delete box
    async function deleteBox(boxId: string, boxName: string) {
        try {
            if (!confirm(`Are you sure you want to delete box "${boxName}"? This cannot be undone.`)) {
                return;
            }
            
            showLoading(true);
            updateStatus(`Deleting box "${boxName}"...`);
            
            const token = await getAuthToken();
            const response = await fetch(`${process.env.PUBLIC_BACKEND_URL}/api/boxes/delete?id=${boxId}`, {
                method: "DELETE",
                headers: {
                    Authorization: `Bearer ${token}`,
                    "Content-Type": "application/json",
                },
            });

            if (!response.ok) {
                throw new Error(`Failed to delete box: ${response.status}`);
            }

            updateStatus(`Box "${boxName}" deleted successfully`, "success");
            loadBoxes(); // Reload boxes list
        } catch (error) {
            console.error("Error deleting box:", error);
            updateStatus(`Error deleting box: ${error instanceof Error ? error.message : 'Unknown error occurred'}`, "error");
        } finally {
            showLoading(false);
        }
    }

    // Show box QR in modal
    async function showBoxQR(boxId: string) {
        try {
            showLoading(true);
            const token = await getAuthToken();
            const response = await fetch(
                `${process.env.PUBLIC_BACKEND_URL}/api/boxes/qr?id=${boxId}`,
                {
                    headers: {
                        Authorization: `Bearer ${token}`,
                        "Content-Type": "application/json",
                    },
                },
            );

            if (!response.ok) {
                throw new Error(`Failed to load QR: ${response.status}`);
            }

            const data = await response.json();
            const box = data.data;

            if (qrContent) {
                qrContent.innerHTML = `
                    <div class="mb-2 font-semibold">${box.name}</div>
                    <div class="bg-white p-3 inline-block rounded-lg shadow-sm border-2 border-gray-100 mb-3">
                        <img src="data:image/png;base64,${box.qrCode}" class="w-48 h-48" alt="QR Code" />
                    </div>
                    <div class="text-xs text-gray-500">Scan this QR code to access box content</div>
                `;
            }

            showQRModal();
        } catch (error) {
            console.error("Error showing box QR:", error);
            updateStatus(`Error: ${error instanceof Error ? error.message : 'Unknown error occurred'}`, "error");
        } finally {
            showLoading(false);
        }
    }

    // Show QR modal with animation
    function showQRModal() {
        const modal = document.getElementById('qr-modal');
        const modalContent = modal?.querySelector('#qr-modal-inner');
        
        if (modal && modalContent) {
            modal.classList.remove('hidden');
            modal.classList.add('flex'); // Add flex when showing
            
            // Force reflow
            modal.offsetHeight;
            
            // Add animation classes
            setTimeout(() => {
                modalContent.classList.remove('scale-95', 'opacity-0');
                modalContent.classList.add('scale-100', 'opacity-100');
            }, 10);
        }
    }

    // Close QR modal with animation
    function closeQRModal() {
        const modal = document.getElementById('qr-modal');
        const modalContent = modal?.querySelector('#qr-modal-inner');
        
        if (modal && modalContent) {
            modalContent.classList.remove('scale-100', 'opacity-100');
            modalContent.classList.add('scale-95', 'opacity-0');
            
            setTimeout(() => {
                modal.classList.add('hidden');
                modal.classList.remove('flex'); // Remove flex when hiding
            }, 300);
        }
    }

    // Open Create Box modal with animation
    function openCreateBoxModal() {
        const modal = document.getElementById('create-box-modal');
        const modalContent = modal?.querySelector('#create-box-modal-inner');
        
        if (modal && modalContent) {
            modal.classList.remove('hidden');
            modal.classList.add('flex'); // Add flex when showing
            
            // Force reflow
            modal.offsetHeight;
            
            // Add animation classes
            setTimeout(() => {
                modalContent.classList.remove('scale-95', 'opacity-0');
                modalContent.classList.add('scale-100', 'opacity-100');
            }, 10);
        }
    }

    // Close Create Box modal with animation
    function closeCreateBoxModal() {
        const modal = document.getElementById('create-box-modal');
        const modalContent = modal?.querySelector('#create-box-modal-inner');
        
        if (modal && modalContent) {
            modalContent.classList.remove('scale-100', 'opacity-100');
            modalContent.classList.add('scale-95', 'opacity-0');
            
            setTimeout(() => {
                modal.classList.add('hidden');
                modal.classList.remove('flex'); // Remove flex when hiding
            }, 300);
        }
    }

    // Update status message
    function updateStatus(message: string, type: string = "info") {
        if (!statusEl) return;

        let color;
        let icon;

        switch (type) {
            case "error":
                color = "bg-red-50 border-red-200 text-red-800";
                icon = `<svg class="w-5 h-5 mr-2 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>`;
                break;
            case "success":
                color = "bg-green-50 border-green-200 text-green-800";
                icon = `<svg class="w-5 h-5 mr-2 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>`;
                break;
            default:
                color = "bg-blue-50 border-blue-200 text-blue-800";
                icon = `<svg class="w-5 h-5 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>`;
        }

        statusEl.className = `mb-6 p-4 rounded-lg ${color} shadow-sm border`;
        statusEl.innerHTML = `
            <div class="flex items-center">
                ${icon}
                <div class="font-medium">${message}</div>
            </div>
        `;
    }

    // Show/hide loading spinner
    function showLoading(show: boolean) {
        if (!loadingEl) return;
        loadingEl.style.display = show ? "flex" : "none";
    }

    // Initialize on page load
    document.addEventListener("DOMContentLoaded", async () => {
        try {
            // Wait for Clerk to be ready before loading boxes
            await waitForClerk();
            // Start loading boxes - Clerk components handle authentication automatically
            loadBoxes();
        } catch (error) {
            console.error("Error initializing:", error);
            updateStatus("Error initializing authentication. Please refresh the page.", "error");
        }
    });
</script>
