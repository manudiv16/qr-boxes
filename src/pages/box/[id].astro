---
import Layout from "../../layouts/Layout.astro";
import { SignedIn, SignedOut } from "@clerk/astro/components";
import "../../styles/global.css";

// Get the box ID from the URL
const { id } = Astro.params;

if (!id) {
    return Astro.redirect("/");
}

// Fetch box details from the backend
let box: { name: string; description?: string; createdAt: string; items: string[] } | null = null;
let error: string | null = null;

try {
    const response = await fetch(`${import.meta.env.PUBLIC_BACKEND_URL}/api/public/box?id=${id}`);
    
    if (response.ok) {
        const data = await response.json();
        box = data.data;
    } else {
        error = "Box not found";
    }
} catch (e) {
    error = "Failed to load box details";
}
---

<Layout title={box ? `Box: ${box.name}` : "Box Not Found"}>
    <main class="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50">
        <div class="container mx-auto px-4 py-8">
            {error ? (
                <!-- Error State -->
                <div class="max-w-md mx-auto text-center">
                    <div class="bg-white rounded-xl shadow-lg p-8">
                        <div class="flex justify-center mb-4">
                            <svg class="w-16 h-16 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                        </div>
                        <h1 class="text-2xl font-bold text-gray-900 mb-2">Box Not Found</h1>
                        <p class="text-gray-600 mb-4">{error}</p>
                        <a href="/" class="inline-block bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors">
                            Go to Home
                        </a>
                    </div>
                </div>
            ) : box ? (
                <!-- Box Details -->
                <div class="max-w-2xl mx-auto">
                    <!-- Header -->
                    <div class="text-center mb-8">
                        <div class="flex justify-center mb-4">
                            <div class="flex items-center justify-center h-16 w-16 bg-gradient-to-r from-blue-600 to-blue-400 text-white rounded-xl shadow-lg">
                                <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
                                </svg>
                            </div>
                        </div>
                        <h1 class="text-3xl font-bold text-gray-900 mb-2">{box.name}</h1>
                        {box.description && (
                            <p class="text-gray-600 mb-2">{box.description}</p>
                        )}
                        <p class="text-gray-500">Box Contents</p>
                    </div>

                    <!-- Box Content -->
                    <div class="bg-white rounded-xl shadow-lg overflow-hidden">
                        <!-- Box Info -->
                        <div class="bg-gradient-to-r from-blue-50 to-green-50 p-6 border-b">
                            <div class="flex items-center justify-between">
                                <div class="flex-1">
                                    <h2 class="text-xl font-semibold text-gray-900">{box.name}</h2>
                                    {box.description && (
                                        <p class="text-sm text-gray-700 mt-2 bg-white/50 rounded p-2">{box.description}</p>
                                    )}
                                    <p class="text-sm text-gray-600 mt-1">
                                        Created: {new Date(box.createdAt).toLocaleDateString()}
                                    </p>
                                </div>
                                <div class="text-right ml-4">
                                    <div class="bg-blue-100 text-blue-800 text-sm font-medium px-3 py-1 rounded-full">
                                        {box.items?.length || 0} items
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Items List -->
                        <div class="p-6">
                            <div class="flex items-center justify-between mb-4">
                                <h3 class="text-lg font-semibold text-gray-900 flex items-center">
                                    <svg class="w-5 h-5 text-blue-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                                    </svg>
                                    Items in this box
                                </h3>
                                
                                <!-- Add Item Button for Authenticated Users -->
                                <SignedIn>
                                    <button
                                        id="add-item-toggle"
                                        class="bg-green-600 hover:bg-green-700 text-white text-sm px-3 py-1 rounded-lg font-medium transition-colors flex items-center"
                                    >
                                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                        </svg>
                                        Add Item
                                    </button>
                                </SignedIn>
                            </div>
                            
                            <!-- Add Item Form for Authenticated Users -->
                            <SignedIn>
                                <div id="add-item-form" class="hidden mb-6 p-4 bg-blue-50 rounded-lg border">
                                    <div class="flex gap-2">
                                        <input
                                            type="text"
                                            id="new-item-input"
                                            placeholder="Enter new item..."
                                            maxlength="100"
                                            class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                        />
                                        <button
                                            id="add-item-btn"
                                            class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors whitespace-nowrap"
                                        >
                                            Add
                                        </button>
                                        <button
                                            id="cancel-add-btn"
                                            class="bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-2 rounded-lg font-medium transition-colors"
                                        >
                                            Cancel
                                        </button>
                                    </div>
                                    <p class="text-xs text-gray-600 mt-2">Add a new item to this box</p>
                                </div>
                            </SignedIn>
                            
                            <!-- Items List Container -->
                            <div id="items-container">
                                {box.items && box.items.length > 0 ? (
                                    <div class="space-y-2">
                                        {box.items.map((item, index) => (
                                            <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors group">
                                                <div class="flex items-center">
                                                    <div class="flex items-center justify-center w-8 h-8 bg-blue-100 text-blue-600 rounded-full mr-3 text-sm font-medium">
                                                        {index + 1}
                                                    </div>
                                                    <span class="text-gray-900">{item}</span>
                                                </div>
                                                
                                                <!-- Delete button - only visible when logged in -->
                                                <SignedIn>
                                                    <button
                                                        class="delete-item-btn md:opacity-0 md:group-hover:opacity-100 opacity-100 text-red-600 hover:text-red-800 hover:bg-red-50 p-2 rounded-lg transition-all"
                                                        data-item={item}
                                                        title="Delete this item"
                                                    >
                                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                        </svg>
                                                    </button>
                                                </SignedIn>
                                            </div>
                                        ))}
                                    </div>
                                ) : (
                                    <div class="text-center py-8">
                                        <svg class="w-12 h-12 text-gray-300 mx-auto mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2 2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"></path>
                                        </svg>
                                        <p class="text-gray-500">This box is empty</p>
                                    </div>
                                )}
                            </div>
                        </div>

                        <!-- Footer -->
                        <div class="bg-gray-50 px-6 py-4 border-t">
                            <!-- Status Message for Operations -->
                            <div id="status-message" class="hidden mb-4 p-3 rounded-lg text-sm"></div>
                            
                            <div class="flex items-center justify-between">
                                <div class="flex items-center text-sm text-gray-600">
                                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                    Scanned via QR Code
                                </div>
                                <a href="/" class="text-blue-600 hover:text-blue-800 text-sm font-medium transition-colors">
                                    Create your own QR boxes →
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            ) : (
                <!-- Loading State -->
                <div class="max-w-md mx-auto text-center">
                    <div class="bg-white rounded-xl shadow-lg p-8">
                        <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mx-auto mb-4"></div>
                        <p class="text-gray-600">Loading box details...</p>
                    </div>
                </div>
            )}
        </div>
    </main>
</Layout>

<script>
    import { Clerk } from "@clerk/clerk-js";

    // Initialize Clerk
    const clerk = new Clerk(import.meta.env.PUBLIC_CLERK_PUBLISHABLE_KEY);
    
    // Get box ID from URL
    const boxId = window.location.pathname.split('/').pop();
    
    // DOM elements
    const addItemToggle = document.getElementById('add-item-toggle');
    const addItemForm = document.getElementById('add-item-form');
    const newItemInput = document.getElementById('new-item-input');
    const addItemBtn = document.getElementById('add-item-btn');
    const cancelAddBtn = document.getElementById('cancel-add-btn');
    const itemsContainer = document.getElementById('items-container');
    const statusMessage = document.getElementById('status-message');

    // Show/hide add item form
    addItemToggle?.addEventListener('click', () => {
        addItemForm?.classList.toggle('hidden');
        if (!addItemForm?.classList.contains('hidden')) {
            newItemInput?.focus();
        }
    });

    // Cancel adding item
    cancelAddBtn?.addEventListener('click', () => {
        addItemForm?.classList.add('hidden');
        if (newItemInput) {
            (newItemInput as HTMLInputElement).value = '';
        }
    });

    // Add item functionality
    addItemBtn?.addEventListener('click', addNewItem);
    newItemInput?.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            addNewItem();
        }
    });

    // Get auth token from Clerk
    async function getAuthToken() {
        await clerk.load();
        if (!clerk.user) {
            throw new Error("User not authenticated");
        }
        if (!clerk.session) {
            throw new Error("No active session");
        }
        return await clerk.session.getToken();
    }

    // Add new item to the box
    async function addNewItem() {
        const itemText = (newItemInput as HTMLInputElement)?.value?.trim();
        
        if (!itemText) {
            showStatus('Please enter an item name', 'error');
            return;
        }

        try {
            (addItemBtn as HTMLButtonElement).disabled = true;
            if (addItemBtn) addItemBtn.textContent = 'Adding...';
            
            const token = await getAuthToken();
            const response = await fetch(`${import.meta.env.PUBLIC_BACKEND_URL}/api/boxes/add-item`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    boxId: boxId,
                    item: itemText
                })
            });

            if (!response.ok) {
                throw new Error(`Failed to add item: ${response.status}`);
            }

            const data = await response.json();
            
            // Update the items display
            await refreshItems();
            
            // Clear form and hide it
            if (newItemInput) {
                (newItemInput as HTMLInputElement).value = '';
            }
            addItemForm?.classList.add('hidden');
            
            showStatus('Item added successfully!', 'success');
            
        } catch (error: any) {
            console.error('Error adding item:', error);
            showStatus(`Error: ${error.message}`, 'error');
        } finally {
            (addItemBtn as HTMLButtonElement).disabled = false;
            if (addItemBtn) addItemBtn.textContent = 'Add';
        }
    }

    // Refresh items list
    async function refreshItems() {
        try {
            const response = await fetch(`${import.meta.env.PUBLIC_BACKEND_URL}/api/public/box?id=${boxId}`);
            
            if (response.ok) {
                const data = await response.json();
                const box = data.data;
                updateItemsDisplay(box.items || []);
                updateItemCount(box.items?.length || 0);
            }
        } catch (error: any) {
            console.error('Error refreshing items:', error);
        }
    }

    // Update items display
    function updateItemsDisplay(items: string[]) {
        if (!itemsContainer) return;
        
        if (items.length > 0) {
            // Check if user is signed in
            const isSignedIn = clerk?.user ? true : false;
            
            // Clear container first
            itemsContainer.innerHTML = '';
            
            // Create container div
            const containerDiv = document.createElement('div');
            containerDiv.className = 'space-y-2';
            
            items.forEach((item, index) => {
                // Create item row
                const itemRow = document.createElement('div');
                itemRow.className = 'flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors group';
                
                // Create left side (number + item text)
                const leftSide = document.createElement('div');
                leftSide.className = 'flex items-center';
                
                const numberBadge = document.createElement('div');
                numberBadge.className = 'flex items-center justify-center w-8 h-8 bg-blue-100 text-blue-600 rounded-full mr-3 text-sm font-medium';
                numberBadge.textContent = (index + 1).toString();
                
                const itemText = document.createElement('span');
                itemText.className = 'text-gray-900';
                itemText.textContent = item;
                
                leftSide.appendChild(numberBadge);
                leftSide.appendChild(itemText);
                
                // Create delete button if user is signed in
                if (isSignedIn) {
                    const deleteBtn = document.createElement('button');
                    deleteBtn.className = 'delete-item-btn md:opacity-0 md:group-hover:opacity-100 opacity-100 text-red-600 hover:text-red-800 hover:bg-red-50 p-2 rounded-lg transition-all';
                    deleteBtn.title = 'Delete this item';
                    deleteBtn.innerHTML = `
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                    `;
                    
                    // Add click event listener directly
                    deleteBtn.addEventListener('click', () => {
                        deleteItem(item);
                    });
                    
                    itemRow.appendChild(leftSide);
                    itemRow.appendChild(deleteBtn);
                } else {
                    itemRow.appendChild(leftSide);
                }
                
                containerDiv.appendChild(itemRow);
            });
            
            itemsContainer.appendChild(containerDiv);
        } else {
            itemsContainer.innerHTML = `
                <div class="text-center py-8">
                    <svg class="w-12 h-12 text-gray-300 mx-auto mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2 2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"></path>
                    </svg>
                    <p class="text-gray-500">This box is empty</p>
                </div>
            `;
        }
    }

    // Delete item from box
    async function deleteItem(itemToDelete: string) {
        try {
            console.log('Attempting to delete item:', itemToDelete);
            
            if (!confirm(`Are you sure you want to delete "${itemToDelete}" from this box?`)) {
                return;
            }

            showStatus('Deleting item...', 'info');
            
            const token = await getAuthToken();
            console.log('Got auth token, making request...');
            
            const response = await fetch(`${import.meta.env.PUBLIC_BACKEND_URL}/api/boxes/remove-item`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    boxId: boxId,
                    item: itemToDelete
                })
            });

            console.log('Response status:', response.status);

            if (!response.ok) {
                const errorData = await response.text();
                console.error('Delete response error:', errorData);
                throw new Error(`Failed to delete item: ${response.status} - ${errorData}`);
            }

            const responseData = await response.json();
            console.log('Delete successful, response:', responseData);

            // Refresh the items list
            await refreshItems();
            
            showStatus(`"${itemToDelete}" deleted successfully!`, 'success');
            
        } catch (error: any) {
            console.error('Error deleting item:', error);
            showStatus(`Error: ${error.message}`, 'error');
        }
    }

    // Update item count in header
    function updateItemCount(count: number) {
        const itemCountElement = document.querySelector('.bg-blue-100.text-blue-800');
        if (itemCountElement) {
            itemCountElement.textContent = `${count} items`;
        }
    }

    // Show status message
    function showStatus(message: string, type: string = 'info') {
        if (!statusMessage) return;

        let bgColor, textColor, icon;
        
        switch (type) {
            case 'success':
                bgColor = 'bg-green-50';
                textColor = 'text-green-800';
                icon = `<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>`;
                break;
            case 'error':
                bgColor = 'bg-red-50';
                textColor = 'text-red-800';
                icon = `<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>`;
                break;
            default:
                bgColor = 'bg-blue-50';
                textColor = 'text-blue-800';
                icon = `<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>`;
        }

        statusMessage.className = `flex items-center p-3 rounded-lg text-sm ${bgColor} ${textColor}`;
        statusMessage.innerHTML = `${icon}${message}`;
        statusMessage.classList.remove('hidden');

        // Auto-hide after 3 seconds
        setTimeout(() => {
            statusMessage.classList.add('hidden');
        }, 3000);
    }

    // Initialize page on load
    document.addEventListener('DOMContentLoaded', () => {
        // Wait for Clerk to load
        clerk.load().then(() => {
            // Add event listeners to initial delete buttons (server-rendered)
            attachInitialDeleteListeners();
        });
    });

    // Attach event listeners to initially rendered delete buttons
    function attachInitialDeleteListeners() {
        const initialDeleteButtons = document.querySelectorAll('.delete-item-btn[data-item]');
        initialDeleteButtons.forEach(button => {
            const itemToDelete = button.getAttribute('data-item');
            if (itemToDelete) {
                button.addEventListener('click', () => {
                    deleteItem(itemToDelete);
                });
            }
        });
    }
</script>

<style>
    /* Custom animations and styles can be added here if needed */
</style>
