---
import Layout from "../layouts/Layout.astro";
import { SignedIn, SignedOut } from "@clerk/astro/components";
import "../styles/global.css";
import UserInfo  from "../components/UserInfo.astro";
import TokensList from "../components/TokensList.tsx";
import CreateTokenForm from "../components/CreateTokenForm.tsx";
import NewTokenModal from "../components/NewTokenModal.astro";
import DeleteTokenModal from "../components/DeleteTokenModal.astro";
---

<Layout title="Profile" currentPage="profile">

    <SignedOut>
        <div class="min-h-screen bg-gray-50 flex items-center justify-center">
            <div class="text-center">
                <h1 class="text-2xl font-bold text-gray-900 mb-4">
                    Access Denied
                </h1>
                <p class="text-gray-600 mb-4">
                    You need to be signed in to access this page.
                </p>
                <a
                    href="/"
                    class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
                >
                    Go to Home
                </a>
            </div>
        </div>
    </SignedOut>

    <SignedIn>
        <main class="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50 pb-12">
            <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                <!-- Header -->
                <div class="text-center mb-8">
                    <h1 class="text-3xl font-bold text-gray-900 mb-4">User Profile</h1>
                    <p class="text-gray-600 max-w-2xl mx-auto">
                        Manage your account settings and API tokens for programmatic access.
                    </p>
                </div>

                <!-- Status Message -->
                <div
                    id="status"
                    class="mb-6 p-4 rounded-lg bg-blue-50 border border-blue-200 shadow-sm hidden"
                >
                    <div class="flex items-center">
                        <svg
                            class="w-5 h-5 mr-2 text-blue-500"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                            ></path>
                        </svg>
                        <div class="text-blue-800 font-medium" id="status-message">
                            Loading...
                        </div>
                    </div>
                </div>



                <UserInfo></UserInfo>



                <!-- API Tokens Section -->
                <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                    <CreateTokenForm client:load />
                    <TokensList client:load onReload={true} />
                </div>
            </div>

            <NewTokenModal />
            <DeleteTokenModal />
        </main>
    </SignedIn>
</Layout>

<script>
class ProfilePage {
    apiUrl: string;
    currentTokenId: string | null;

    constructor() {
        this.apiUrl = process.env.PUBLIC_BACKEND_URL || '';
        this.currentTokenId = null;
        this.init();
        // Make this instance available globally for the React components
        (window as any).profilePage = this;
    }

    init() {
        this.waitForClerkAndLoad();
    }

    async waitForClerkAndLoad() {
        // First wait for Clerk to be available
        let attempts = 0;
        const maxAttempts = 50; // Wait up to 5 seconds
        
        while (attempts < maxAttempts) {
            if (typeof window !== 'undefined' && (window as any).Clerk && (window as any).Clerk.loaded) {
                break;
            }
            
            await new Promise(resolve => setTimeout(resolve, 100)); // Wait 100ms
            attempts++;
        }
        
        if (attempts >= maxAttempts) {
            this.updateStatus('Authentication service not available. Please refresh the page.', 'error');
            return;
        }
        
        // Now check if user is signed in
        attempts = 0;
        while (attempts < maxAttempts) {
            if ((window as any).Clerk.user) {
                // The React components will handle their own initialization
                return;
            }
            
            await new Promise(resolve => setTimeout(resolve, 100)); // Wait 100ms
            attempts++;
        }
        
        // User is not signed in
        this.updateStatus('Please sign in to access your profile.', 'error');
    }

    async getAuthToken(): Promise<string | null> {
        try {
            if (typeof window !== 'undefined' && (window as any).Clerk && (window as any).Clerk.session) {
                const token = await (window as any).Clerk.session.getToken();
                return token;
            }
            return null;
        } catch (error) {
            console.error('❌ Error getting auth token:', error);
            return null;
        }
    }

    async toggleToken(tokenId: string, isActive: boolean) {
        try {
            const token = await this.getAuthToken();
            if (!token) {
                throw new Error('No authentication token available');
            }

            const response = await fetch(`${this.apiUrl}/api/tokens/update?tokenId=${tokenId}`, {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ isActive })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Failed to update API token');
            }

            this.updateStatus(`Token ${isActive ? 'activated' : 'deactivated'} successfully!`, 'success');
            
            // Reload the React TokensList component
            if ((window as any).reloadTokensList) {
                (window as any).reloadTokensList();
            }

        } catch (error) {
            console.error('Error toggling token:', error);
            this.updateStatus((error as Error).message || 'Failed to update token', 'error');
        }
    }

    // This method is now called by the DeleteTokenModal component
    showDeleteTokenModal(tokenId: string, tokenName: string) {
        if ((window as any).showDeleteTokenModal) {
            (window as any).showDeleteTokenModal(tokenId, tokenName);
        }
    }

    hideDeleteTokenModal() {
        if ((window as any).hideDeleteTokenModal) {
            (window as any).hideDeleteTokenModal();
        }
    }

    async performDeleteToken() {
        if (!this.currentTokenId) return;

        try {
            const token = await this.getAuthToken();
            if (!token) {
                throw new Error('No authentication token available');
            }

            const response = await fetch(`${this.apiUrl}/api/tokens/delete?tokenId=${this.currentTokenId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Failed to delete API token');
            }

            this.hideDeleteTokenModal();
            this.updateStatus('API token deleted successfully!', 'success');
            
            // Reload the React TokensList component
            if ((window as any).reloadTokensList) {
                (window as any).reloadTokensList();
            }

        } catch (error) {
            console.error('Error deleting token:', error);
            this.updateStatus((error as Error).message || 'Failed to delete token', 'error');
        }
    }

    updateStatus(message: string, type: string = 'info') {
        const statusEl = document.getElementById('status');
        const messageEl = document.getElementById('status-message');
        
        if (!statusEl || !messageEl) return;

        if (!message) {
            statusEl.classList.add('hidden');
            return;
        }

        statusEl.classList.remove('hidden');
        
        // Update styles based on type
        const colors: {[key: string]: string} = {
            info: 'bg-blue-50 border-blue-200 text-blue-800',
            success: 'bg-green-50 border-green-200 text-green-800',
            error: 'bg-red-50 border-red-200 text-red-800',
            loading: 'bg-yellow-50 border-yellow-200 text-yellow-800'
        };

        statusEl.className = `mb-6 p-4 rounded-lg shadow-sm ${colors[type] || colors.info}`;
        messageEl.textContent = message;
    }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    new ProfilePage();
});
</script>
